{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/SingleQuote.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","onAddComment","quoteId","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","useEffect","form","onSubmit","event","preventDefault","enteredText","current","value","commentData","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","quoteID","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","SingleQuote","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url","style","textAlign"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,MAAQ,kC,mBCA1BD,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCApJD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,wFCUdC,EATU,SAACC,GACxB,OACE,yBAAQC,UAAWC,IAAQC,MAA3B,UACE,4BAAIH,EAAMI,OACV,qCAAaJ,EAAMK,a,kECsDVC,EAlDQ,SAACN,GAEtB,IAAQO,EAA0BP,EAA1BO,aAAcC,EAAYR,EAAZQ,QAGhBC,EAAiBC,mBAGvB,EAAuCC,YAAQC,KAAvCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MAG7BC,qBAAU,WACO,cAAXF,GAA2BC,GAC7BR,MAED,CAACO,EAAQC,EAAOR,IAenB,OACE,uBAAMN,UAAWC,IAAQe,KAAMC,SAbP,SAACC,GACzBA,EAAMC,iBAEN,IAAMC,EAAcZ,EAAea,QAAQC,MAI3CV,EAAY,CAAEW,YAAa,CAAEpB,KAAMiB,GAAeb,QAASA,IAE3DC,EAAea,QAAQC,MAAQ,IAI/B,UACc,YAAXT,GACC,qBAAKb,UAAU,WAAf,SACE,cAACwB,EAAA,EAAD,MAIJ,sBAAKxB,UAAWC,IAAQwB,QAAxB,UACE,uBAAOC,QAAQ,UAAf,0BACA,0BAAUC,GAAG,UAAUC,KAAK,IAAIC,IAAKrB,OAGvC,qBAAKR,UAAWC,IAAQ6B,QAAxB,SACE,wBAAQ9B,UAAU,MAAlB,+B,iBC3CO+B,EARK,SAAChC,GACnB,OACE,oBAAIC,UAAWC,IAAQ+B,KAAvB,SACE,4BAAIjC,EAAMI,U,iBCUD8B,EAVM,SAAClC,GACpB,OACE,oBAAIC,UAAWC,IAAQiC,SAAvB,SACGnC,EAAMmC,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8BjC,KAAMiC,EAAQjC,MAA1BiC,EAAQT,UCgFnBU,EA5EE,WAEf,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAIQC,EADOC,cACPD,QAGR,EAKI/B,YAAQiC,KAJV/B,EADF,EACEA,YACAC,EAFF,EAEEA,OACM+B,EAHR,EAGEC,KACA/B,EAJF,EAIEA,MAIFC,qBAAU,WACRH,EAAY6B,KACX,CAAC7B,EAAa6B,IAGjB,IAUIP,EAVEY,EAAsBC,uBAAY,WACtCnC,EAAY6B,KACX,CAAC7B,EAAa6B,IAkBjB,MARe,YAAX5B,IACFqB,EACE,qBAAKlC,UAAU,WAAf,SACE,cAACwB,EAAA,EAAD,OAKFV,EACK,mBAAGd,UAAU,WAAb,SAAyBc,KAGnB,cAAXD,IAA2B+B,GAAkBA,EAAeI,OAAS,KACvEd,EAAW,cAAC,EAAD,CAAcA,SAAUU,KAIxB,cAAX/B,GACE+B,GAA4C,IAA1BA,EAAeI,SAEnCd,EAAW,mBAAGlC,UAAU,WAAb,2CAIX,0BAASA,UAAWC,IAAQiC,SAA5B,UACE,gDAEEK,GACA,wBAAQvC,UAAU,MAAMiD,QAnCC,WAC7BT,GAAmB,IAkCf,2BAKDD,GACC,cAAC,EAAD,CAAgBhC,QAASkC,EAASnC,aAAcwC,IAGjDZ,OClBQgB,UAxDK,WAElB,IAAMC,EAAQC,cAIR7C,EADSmC,cACQD,QAGvB,EAKI/B,YAAQ2C,KAAgB,GAJ1BzC,EADF,EACEA,YACAC,EAFF,EAEEA,OACMyC,EAHR,EAGET,KACA/B,EAJF,EAIEA,MAQF,OAJAC,qBAAU,WACRH,EAAYL,KACX,CAACK,EAAaL,IAEF,YAAXM,EAEA,qBAAKb,UAAU,WAAf,SACE,cAACwB,EAAA,EAAD,MAKFV,EACK,mBAAGd,UAAU,WAAb,SAAyBc,IAG7BwC,EAAYnD,KAKf,eAAC,WAAD,WACE,cAAC,EAAD,CAAkBA,KAAMmD,EAAYnD,KAAMC,OAAQkD,EAAYlD,SAE9D,cAAC,IAAD,CAAOmD,KAAI,UAAKJ,EAAMI,MAAQC,OAAK,EAAnC,SACE,qBAAKxD,UAAU,WAAf,SACE,cAAC,IAAD,CAAMA,UAAU,YAAYyD,GAAE,UAAKN,EAAMO,IAAX,aAA9B,+BAMJ,cAAC,IAAD,CAAOH,KAAI,UAAKJ,EAAMI,KAAX,aAAX,SACE,cAAC,EAAD,SAhBG,oBAAII,MAAO,CAAEC,UAAW,UAAxB","file":"static/js/4.9a5184c4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__2sDBE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__3sB-t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3rFBN\",\"loading\":\"NewCommentForm_loading__PRyYf\",\"control\":\"NewCommentForm_control__mmBrJ\",\"actions\":\"NewCommentForm_actions__MoCKG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2pjAL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__pFe6J\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useRef, useEffect } from \"react\";\n\n//Import Components\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\n//Styles\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  //props\n  const { onAddComment, quoteId } = props;\n\n  //useRef\n  const commentTextRef = useRef();\n\n  //useHttp Hook\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  //Effects\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddComment();\n    }\n  }, [status, error, onAddComment]);\n\n  //Submit Handler\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    sendRequest({ commentData: { text: enteredText }, quoteId: quoteId });\n\n    commentTextRef.current.value = \"\";\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n\n      <div className={classes.control}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","//Styles\nimport classes from \"./CommentItem.module.css\";\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","//Import Components\nimport CommentItem from \"./CommentItem\";\n\n//Styles\nimport classes from \"./CommentsList.module.css\";\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\n\nimport { useParams } from \"react-router\";\n\n//Styles\nimport classes from \"./Comments.module.css\";\n\n//Import Components\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n  //States\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  //Params\n  const params = useParams();\n  const { quoteID } = params;\n\n  //useHttp Hook\n  const {\n    sendRequest,\n    status,\n    data: loadedComments,\n    error,\n  } = useHttp(getAllComments);\n\n  //Effects\n  useEffect(() => {\n    sendRequest(quoteID);\n  }, [sendRequest, quoteID]);\n\n  //Handler\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteID);\n  }, [sendRequest, quoteID]);\n\n  //Submit Handler\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  //JSX Handler\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className=\"centered\">{error}</p>;\n  }\n\n  if (status === \"completed\" && (loadedComments || loadedComments.length > 0)) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No Comments Were Added Yet !</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n\n      {isAddingComment && (\n        <NewCommentForm quoteId={quoteID} onAddComment={addedCommentHandler} />\n      )}\n\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { Fragment, useEffect } from \"react\";\r\n\r\nimport { Route, Link, useParams, useRouteMatch } from \"react-router-dom\";\r\n\r\n//Import Components\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\nconst SingleQuote = () => {\r\n  //Match\r\n  const match = useRouteMatch();\r\n\r\n  //Access To Dynamic URL With useParams\r\n  const params = useParams();\r\n  const quoteId = params.quoteID;\r\n\r\n  //useHttp Hook\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered\">{error}</p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <h1 style={{ textAlign: \"center\" }}>No Quote Found !!!</h1>;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n\r\n      <Route path={`${match.path}`} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SingleQuote;\r\n"],"sourceRoot":""}